#!/usr/bin/env python
# Copyright (C) 2011 Neil Rahilly <neilrahilly@gmail.com>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tool to convert phone number metadata from the XML format to protocol 
buffer format. (Based on the Java version.)
"""

import optparse
import os.path
import pprint

from phonenumbers import buildmetadatafromxml
from phonenumbers import phonemetadata_pb2
from phonenumbers import phonenumberutil
from phonenumbers.test import phonenumberutil_test


USAGE = """Example command line invocation:
./buildmetadataprotofromxml.py -tl -i PhoneNumberMetadata.xml -o data"""


COPYRIGHT_NOTICE = """
# Copyright (C) 2011 Neil Rahilly <neilrahilly@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file is automatically generated by BuildMetadataProtoFromXml. Please
# don't modify directly.
"""

MAPPING_COMMENT = """
# A mapping from a country code to the region codes which denote the
# country/region represented by that country code. In the case of multiple
# countries sharing a calling code, such as the NANPA countries, the one
# indicated with "is_main_country_for_code" in the metadata should be first.
"""


def main():
    parser = optparse.OptionParser(USAGE)
    parser.add_option("-i", "--input-file", dest="input_file",
            help="The input file containing phone number metadata in XML "
                 "format.")
    parser.add_option("-o", "--output-dir", dest="output_dir",
            help="The output directory to store phone number metadata in "
                 "proto format (one file per region) and the country code to "
                 "region code mapping file.")
    parser.add_option("-t", "--for-testing", dest="for_testing", 
            action="store_true", default=False,
            help="Flag whether to generate metadata for testing purposes or "
                 "not (default: false).")
    parser.add_option("-l", "--lite-build", dest="lite_build", 
            action="store_true", default=False,
            help="Whether to generate the lite-version of the metadata "
                 "(default: false). When set to true certain metadata will "
                 "be omitted. At this moment, example numbers information is "
                 "omitted.")
    options, args = parser.parse_args()

    input_file = options.input_file
    output_dir = options.output_dir
    for_testing = options.for_testing
    lite_build = options.lite_build

    # Generate metadata proto files
    if for_testing:
        file_prefix = \
                output_dir + phonenumberutil_test.TEST_META_DATA_FILE_PREFIX
    else:
        file_prefix = output_dir + phonenumberutil.META_DATA_FILE_PREFIX

    metadata_collection = buildmetadatafromxml.build_phone_metadata_collection(
            input_file, lite_build)

    for metadata in metadata_collection.metadata:
        region_code = metadata.id
        out_metadata_collection = phonemetadata_pb2.PhoneMetadataCollection()
        out_metadata_collection.metadata.add().CopyFrom(metadata)
        output_filename = os.path.join((file_prefix + "_" + region_code)[1:]) 
        output_for_region = open(output_filename, "wb")
        output_for_region.write(
                out_metadata_collection.SerializeToString())
        output_for_region.close()
    
    # Generate countrycodetoregioncodemap.py module
    country_code_to_region_code_map = \
            buildmetadatafromxml.build_country_code_to_region_code_map(
                    metadata_collection)
    _write_country_calling_code_mapping_to_python_file(
            country_code_to_region_code_map, output_dir, for_testing)


def _write_country_calling_code_mapping_to_python_file(
            country_code_to_region_code_map, output_dir, for_testing):
    mapping_name = phonenumberutil.COUNTRY_CODE_TO_REGION_CODE_MAP_NAME
    module_name = mapping_name.replace("_", "")
    
    if for_testing:
        mapping_name += "_test"
    try:
        mapping_file_name = os.path.join(output_dir, module_name)
        mapping_file = open(mapping_file_name, "w")
        mapping_file.write(COPYRIGHT_NOTICE) 
        mapping_file.write(MAPPING_COMMENT)
        mapping_file.write("%s = {\n" % mapping_name)
        pprint.pprint(country_code_to_region_code_map, mapping_file)

        # for country_calling_code, region_codes in country_code_to_region_code_map.items():
        #     mapping_file.write("    %d: [\n" % country_calling_code)
        #     for region_code in region_codes:
        #         mapping_file.write('        "%s",\n' % region_code)
        #     mapping_file.write("    ],\n")
        # mapping_file.write("}\n")
    finally:
        mapping_file.close()


if __name__ == "__main__":
    main()
